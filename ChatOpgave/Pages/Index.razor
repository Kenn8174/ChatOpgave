@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="row">
	<div class="col-auto">
		<div class="form-group">
			<label>
				User:
				<input @bind="userInput" disabled />
			</label>
		</div>
		<div class="overflow">
			<ul>
				@foreach (var message in messages)
				{
					<li>@message</li>
				}
			</ul>
		</div>
		<div class="form-group">
			<label>
				Message:
				<input @bind="messageInput" size="50" />
				<button class="btn btn-primary" @onclick="Send" disabled="@(!IsConnected)">Send</button>
			</label>
		</div>
	</div>
</div>


@code{
	private HubConnection hubConnection;
	private List<string> messages = new List<string>();
	private List<string> users = new();
	private string userInput;
	private string messageInput;

	protected override async Task OnInitializedAsync()
	{
		// Generates a random username
		// Anon* is a common name for Anonymous person on the internet
		Random rnd = new Random();
		userInput = $"Anon{rnd.Next(1000, 9999)}";

		hubConnection = new HubConnectionBuilder()
		.WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
		.Build();

		hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
		{
			var encodedMsg = $"{DateTime.Now.ToString("HH:mm:ss")} {user}: {message}";
			messages.Add(encodedMsg);
			StateHasChanged();
		});

		hubConnection.On<string>("ReceiveEntry", (user) =>
		{
			var encodeMsg = $"{DateTime.Now.ToString("HH:mm:ss")} {user}: Just joined the chat!";
			messages.Add(encodeMsg);
			StateHasChanged();
		});
				
		await hubConnection.StartAsync();
	}

	// Writes in the chat when someone joins
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await SendEntry();
		}
	}

	private async Task Send()
	{
		if (hubConnection != null)
		{
			await hubConnection.SendAsync("SendMessage", userInput, messageInput);
		}
	}

	private async Task SendEntry()
	{
		if (hubConnection != null)
		{
			await hubConnection.SendAsync("SendEntry", userInput);
		}
	}

	public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

	// Disconnecter hubben, når applicationen lukkes
	public async ValueTask DisposeAsync()
	{
		if (hubConnection != null)
		{
			await hubConnection.DisposeAsync();
		}
	}
}